//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@interface MLKITx_GMVUtility : NSObject
{
}

+ (id)imageFromData:(id)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3;
+ (long long)imageOrientationFromOrientation:(long long)arg1;
+ (id)sampleBufferTo32RGBA:(struct opaqueCMSampleBuffer *)arg1;
+ (id)anySampleBufferFormatTo32RGBA:(struct opaqueCMSampleBuffer *)arg1;
+ (long long)imageOrientationFromOrientation:(long long)arg1 withCaptureDevicePosition:(long long)arg2 defaultDeviceOrientation:(long long)arg3;
+ (_Bool)safeIntAdd:(int)arg1 with:(int)arg2 result:(int *)arg3;
+ (_Bool)safeUIntAdd:(unsigned long long)arg1 with:(unsigned long long)arg2 result:(unsigned long long *)arg3;
+ (_Bool)safeIntMultiply:(int)arg1 with:(int)arg2 result:(int *)arg3;
+ (_Bool)safeUIntMultiply:(unsigned long long)arg1 with:(unsigned long long)arg2 result:(unsigned long long *)arg3;
+ (id)resourceSearchPaths:(Class)arg1 bundleName:(id)arg2;
+ (_Bool)saveDebugImageInDocument:(id)arg1 forName:(id)arg2;
+ (id)imageForName:(id)arg1;
+ (struct opaqueCMSampleBuffer *)sampleBufferRefFromUIImage:(id)arg1 rotate:(int)arg2;
+ (struct opaqueCMSampleBuffer *)YCbCrsampleBufferRefFromUIImage:(id)arg1;
+ (struct opaqueCMSampleBuffer *)YCbCrsampleBufferRefFromUIImage:(id)arg1 videoRange:(_Bool)arg2;
+ (id)permutate:(id)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3 bytesPerRow:(unsigned long long)arg4 order:(const char *)arg5;
+ (_Bool)writeToFile:(void *)arg1 fileName:(id)arg2 width:(unsigned long long)arg3 height:(unsigned long long)arg4 channel:(int)arg5 bitsPerComponent:(unsigned long long)arg6 bitsPerPixel:(unsigned long long)arg7 bytesPerRow:(unsigned long long)arg8 colorSpace:(struct CGColorSpace *)arg9;
+ (id)grayPixelDataFromYCbCr:(struct __CVBuffer *)arg1;
+ (id)grayPixelDataFromBGRA:(struct __CVBuffer *)arg1;
+ (id)grayPixelData:(id)arg1 orientation:(long long)arg2 width:(double *)arg3 height:(double *)arg4;
+ (id)grayPixelData:(id)arg1 width:(double *)arg2 height:(double *)arg3 withOrientation:(long long)arg4;
+ (id)rgbaPixelDataFromCGImage:(struct CGImage *)arg1;
+ (id)rgbPixelDataFromImage:(id)arg1 orientation:(long long)arg2 width:(double *)arg3 height:(double *)arg4 removeAlphaChannel:(_Bool)arg5;
+ (id)rgbaPixelDataFromBuffer:(id)arg1 orientation:(long long)arg2 width:(double *)arg3 height:(double *)arg4 removeAlphaChannel:(_Bool)arg5;
+ (struct CGRect)reverseRotateRect:(struct CGRect)arg1 orientation:(long long)arg2 imageWidth:(double)arg3 imageHeight:(double)arg4;
+ (struct CGPoint)reverseRotatePoint:(struct CGPoint)arg1 orientation:(long long)arg2 imageWidth:(double)arg3 imageHeight:(double)arg4;
+ (struct CGRect)rotateRect:(struct CGRect)arg1 orientation:(long long)arg2 imageWidth:(double)arg3 imageHeight:(double)arg4;
+ (struct CGPoint)rotatePoint:(struct CGPoint)arg1 orientation:(long long)arg2 imageWidth:(double)arg3 imageHeight:(double)arg4;
+ (struct CGRect)rotateRectClockwise:(struct CGRect)arg1 withAngle:(unsigned long long)arg2 withWidth:(double)arg3 withHeight:(double)arg4;
+ (struct CGPoint)rotatePointClockwise:(struct CGPoint)arg1 withAngle:(unsigned long long)arg2 withWidth:(double)arg3 withHeight:(double)arg4;
+ (struct CGPoint)horizontallyFlipPoint:(struct CGPoint)arg1 withWidth:(double)arg2 withHeight:(double)arg3;
+ (struct CGRect)horizontallyFlipRect:(struct CGRect)arg1 withWidth:(double)arg2 withHeight:(double)arg3;
+ (unsigned long long)safeCalculateIndex:(unsigned long long)arg1 withY:(unsigned long long)arg2 withWidth:(unsigned long long)arg3 withChannel:(unsigned long long)arg4 withOffset:(unsigned long long)arg5;
+ (int)safeCalculate420YpCbCrVideoRangeB:(int)arg1 cb:(int)arg2;
+ (int)safeCalculate420YpCbCrVideoRangeG:(int)arg1 cb:(int)arg2 cr:(int)arg3;
+ (int)safeCalculate420YpCbCrVideoRangeR:(int)arg1 cr:(int)arg2;
+ (int)safeCalculate420YpCbCrFullRangeB:(int)arg1 cb:(int)arg2;
+ (int)safeCalculate420YpCbCrFullRangeG:(int)arg1 cr:(int)arg2 cb:(int)arg3;
+ (int)safeCalculate420YpCbCrFullRangeR:(int)arg1 cr:(int)arg2;
+ (unsigned long long)safelCalculateHelper:(unsigned long long)arg1 withY:(unsigned long long)arg2 withRightShift:(unsigned long long)arg3;
+ (unsigned long long)safeCalculateIndex:(unsigned long long)arg1 withY:(unsigned long long)arg2 withRowBytes:(unsigned long long)arg3 withOffsete:(unsigned long long)arg4;
+ (id)sampleBufferYCbCrTo32RGBA:(struct opaqueCMSampleBuffer *)arg1;
+ (id)sampleBuffer32BGRATo32RGBA:(struct opaqueCMSampleBuffer *)arg1;
+ (id)rgbPixelData:(struct opaqueCMSampleBuffer *)arg1 orientation:(long long)arg2 width:(double *)arg3 height:(double *)arg4 removeAlphaChannel:(_Bool)arg5;
+ (id)rotateImage:(id)arg1 withAngle:(int)arg2;
+ (id)rotatePixelData:(id)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3 bytesPerRow:(unsigned long long)arg4 withAngle:(int)arg5;
+ (id)flipRGBA8888Horizontally:(id)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3 bytesPerRow:(unsigned long long)arg4;
+ (id)flattenRGBA8888ToRGB888:(id)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3 bytesPerRow:(unsigned long long)arg4;
+ (int)rotationAngle:(long long)arg1;
+ (int)reverseRotationAngle:(long long)arg1;
+ (_Bool)isHorizontallyFlipped:(id)arg1;
+ (id)base64EncodedImageString:(id)arg1;
+ (id)imagesFromRgbaPixelData:(id)arg1 forRects:(id)arg2 withOrientation:(long long)arg3 forImageSize:(struct CGSize)arg4;

@end

